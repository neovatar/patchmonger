#!/bin/bash

# Copyright 2015 Thomas Seliger <neovatar@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

VERSION="0.2.3"
FORCE=""
VERBOSE=""
ROLLBACK="yes"
KEEP_ROLLBACK=""
SCRIPTDIR=$(dirname $(readlink -f $0))
ROLLBACKDIR="$SCRIPTDIR/rollback-$(date +%Y%m%d%H%M)"

function header {
  echo "                                "
  echo " _  _ |_ _|_  _  _  _  _  _ _ "
  echo "|_)(_||_(_| )|||(_)| )(_)(-|  "
  echo "|                     _/v$VERSION"
  echo
}

function error {
  echo "ERROR: $1"
  exit 1
}

function warn {
  echo "WARNING: $1"
}

function usage {
  if [ "$1" != "" ]; then
    echo "USAGE ERROR: $1" 
    echo
  fi
  echo "Build a patchset:"
  echo "================="
  echo "patchmonger [-v] create-patch OLDDIR NEWDIR PATCHDIR"
  echo
  echo "Build a patch from the old version of the game in OLDDIR to the"
  echo "new version in NEWDIR, assemble the patch in PATCHDIR."
  echo
  echo "Rollback a patchset:"
  echo "===================="
  echo "patchmonger [-v] rollback-patch ROLLBACKDIR GAMEDIR"
  echo
  echo "Applies the rollback information in directory ROLLBACKDIR"
  echo "to GAMEDIR. Normally this is used internally to rollback"
  echo "on failed patches, and does no need to be called manually."
  echo
  echo "Apply a patchset:"
  echo "================="
  echo "patchmonger [-v] [-f] [-n] [-k] [GAMEDIR]"
  echo
  echo "Looks for a patchset in the same directory as patchmonger and"
  echo "applies it to the game installed in GAMEDIR, if GAMEDIR is"
  echo "not specified patchmonger will ask for the game installation directory."
  echo
  echo "Options:"
  echo "-v  more verbose output."
  echo "-k  keep rollback information for later use (with rollback-patch)"
  echo "-f  turn some errors into warnings, only use this with caution!"
  echo "-n  do not create rollback information, only use this with caution!"
  echo

  [ "$1" != "" ] && exit 1
  exit 0
}

function create-patch {
  OLD=$(readlink -f "$1")
  NEW=$(readlink -f "$2")
  PATCHDIR=$(readlink -f "$3")
  PATCHNAME="$(basename $PATCHDIR)"
  PATCHDATA="$PATCHDIR/$PATCHNAME/pmdata"
  

  [ -e "$PATCHDIR" ] && error "Patch building directory $PATCHDIR already exists!"
  [ ! -e "$NEW" ] && error "New version directory $NEW does not exist!"
  [ ! -e "$OLD" ] && error "Old version directory $OLD does not exist!"

  echo "Building patch ..."
  mkdir -p "$PATCHDATA"

  echo
  echo "Checking for deleted files ..."
  pushd "$OLD" >/dev/null
  DEL_COUNT=0
  while IFS= read -r -d '' FILE; do
    FILE_DIR=$(dirname "$FILE")
    if [ ! -e "$NEW/$FILE" ]; then
      DEL_COUNT=$(( DEL_COUNT + 1 ))
      [ "$VERBOSE" ] && echo "Add removal of file $FILE to patchset"
      mkdir -p "$PATCHDATA/$FILE_DIR"
      touch "$PATCHDATA/$FILE.pmdel"
      STATUS=$?
      [ $STATUS -ne 0 ] && error "Cannot create $PATCHDATA/$FILE.pmdel"
    fi
    printf "deleted: $DEL_COUNT \r"
  done < <(find . -type f -print0)
  popd >/dev/null
  echo

  echo
  echo "Checking for patched or new files ..."
  pushd "$NEW" >/dev/null
  NEW_COUNT=0
  PATCH_COUNT=0
  while IFS= read -r -d '' FILE; do
    FILE_DIR=$(dirname "$FILE")
    if [ ! -e "$OLD/$FILE" ]; then
      NEW_COUNT=$(( NEW_COUNT + 1 ))
      [ "$VERBOSE" ] && echo "Adding diff for new file $FILE"
      mkdir -p "$PATCHDATA/$FILE_DIR"
      touch "$PATCHDATA/$FILE"
      xdelta3 -D -R -S lzma -s "$PATCHDATA/$FILE" "$NEW/$FILE" "$PATCHDATA/$FILE.pmnewdiff"
      rm "$PATCHDATA/$FILE"
      PATCH_FILEPERM=$(stat -c "%a" "$NEW/$FILE")
      chmod "$PATCH_FILEPERM" "$PATCHDATA/$FILE.pmnewdiff"
      STATUS=$?
      [ $STATUS -ne 0 ] && error "Cannot create $PATCHDATA/$FILE.pmnewdiff"
    else
      MD5_NEW=($(md5sum "$NEW/$FILE"))
      MD5_OLD=($(md5sum "$OLD/$FILE"))
      if [ "$MD5_OLD" != "$MD5_NEW" ]; then
        PATCH_COUNT=$(( PATCH_COUNT + 1 ))
        [ "$VERBOSE" ] && echo "Creating xdelta3 diff for $FILE"
        mkdir -p "$PATCHDATA/$FILE_DIR"
        xdelta3 -D -R -S lzma -s "$OLD/$FILE" "$NEW/$FILE" "$PATCHDATA/$FILE.pmdiff"
        STATUS=$?
        [ $STATUS -ne 0 ] && error "Cannot create $PATCHDATA/$FILE.pmdiff"
      fi
    fi
    printf "patched: $PATCH_COUNT, new: $NEW_COUNT\r"
  done < <(find . -type f -print0)
  popd >/dev/null
  echo

  echo
  echo "Copying patchmonger to patch dir ..."
  pushd "$PATCHDIR" >/dev/null
  cp -p "$SCRIPTDIR/patchmonger" "$PATCHNAME"
  cp -p "$SCRIPTDIR/README.md" "$PATCHNAME/patchmonger-README.md"

  echo
  echo "Creating patch tgz ..."
  tar cfz "$PATCHNAME.tgz" "$PATCHNAME" && rm -rf "$PATCHNAME"
  popd >/dev/null

  echo
  echo "Finished!"
}

function cleanup-rollbackdir {
  if [ "$ROLLBACK" ] && [ -e "$ROLLBACKDIR" ] && [ -z "$KEEP_ROLLBACK" ]; then
    rm -rf "$ROLLBACKDIR"
  fi
}

function rollback-patch {
  DST=$(readlink -f "$1")
  ROLLBACKOK="yes"

  echo
  echo "Checking for game installation to patch ... "
  [ ! -e "$DST" ] && error "Game installation directory $DST does not exist!"
  echo "$DST"

  echo
  echo "ERROR: Error detected, attempting rollback ..."
  if [ -z "$ROLLBACK" ]; then
    echo "Rollback disabled, nothing to do!"
  elif [ ! -e "$ROLLBACKDIR" ]; then
    echo "Game installation directory $ROLLBACKDIR does not exist, nothing to do!"
  else
    echo
    echo "Rollback modified files ..."
    pushd "$ROLLBACKDIR" >/dev/null
    REVERT_COUNT=0
    DEL_COUNT=0
    while IFS= read -r -d '' FILE; do
      FILE_DIR=$(dirname "$FILE")
      PATCH_TYPE=$(echo $FILE | sed 's/.*\.\(pmbackup\|pmdel\)$/\1/')
      PATCH_FILENAME=$(echo $FILE | sed 's/\(.*\)\.\(pmbackup\|pmdel\)$/\1/')
      case "$PATCH_TYPE" in
        pmbackup)
          REVERT_COUNT=$(( REVERT_COUNT + 1 ))
          cp -p "$ROLLBACKDIR/$FILE" "$DST/$PATCH_FILENAME"
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "Cannot revert $DST/$PATCH_FILENAME to $ROLLBACKDIR/$FILE"
            ROLLBACKOK="no"
          fi
        ;;
        pmdel)
          DEL_COUNT=$(( DEL_COUNT + 1 ))
          rm "$DST/$PATCH_FILENAME"
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "Cannot delete $DST/$PATCH_FILENAME"
            ROLLBACKOK="no"
          fi
        ;;
      esac
      printf "reverted: $REVERT_COUNT, deleted: $DEL_COUNT\r"
    done < <(find . -type f \( -name \*.pmbackup -o -name \*.pmdel \) -print0)
    echo
    if [ "$ROLLBACKOK" = "yes" ]; then
      echo "Rollback ok."
      cleanup-rollbackdir
    else
      echo "ERROR: Rollback failed!"
    fi
    echo
    popd >/dev/null
  fi
}

function apply-patch {
  echo "Looking for a patch ... "
  SRC="$SCRIPTDIR/pmdata"
  [ ! -e "$SRC" ] && usage "No $SCRIPTDIR/pmdata directory found, nothing to patch?"
  echo "$SRC"

  if [ -z "$1" ]; then
    echo "Please enter your game installation directory:"
    read DST
    DST="${DST/#\~/$HOME}"
    DST=$(readlink -f "$DST")
  else
    DST=$(readlink -f "$1")
  fi

  echo
  echo "Checking for game installation to patch ... "
  [ ! -e "$DST" ] && error "Game installation directory $DST does not exist!"
  echo "$DST"

  echo
  echo "Applying patch diffs, new files and deletes ... "
  pushd "$SRC" >/dev/null
  NEW_COUNT=0
  PATCH_COUNT=0
  DEL_COUNT=0
  while IFS= read -r -d '' FILE; do
    FILE_DIR=$(dirname "$FILE")
    PATCH_TYPE=$(echo $FILE | sed 's/.*\.\(pmdiff\|pmdel\|pmnew\|pmnewdiff\)$/\1/')
    PATCH_FILENAME=$(echo $FILE | sed 's/\(.*\)\.\(pmdiff\|pmdel\|pmnew\|pmnewdiff\)$/\1/')
    mkdir -p "$DST/$FILE_DIR"
    [ "$ROLLBACK" ] && mkdir -p "$ROLLBACKDIR/$FILE_DIR"
    case "$PATCH_TYPE" in
      pmdiff)
        PATCH_COUNT=$(( PATCH_COUNT + 1 ))
        [ "$ROLLBACK" ] && cp -p "$DST/$PATCH_FILENAME" "$ROLLBACKDIR/$PATCH_FILENAME.pmbackup"
        [ "$VERBOSE" ] && echo "Applying diff to $DST/$PATCH_FILENAME"
        xdelta3 -D -R -d -s "$DST/$PATCH_FILENAME" "$SRC/$FILE" "$DST/$PATCH_FILENAME.patched"
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
          MSG="Cannot apply xdelta patch to $DST/$PATCH_FILENAME"
          echo
          [ -z "$FORCE" ] && rollback-patch "$DST" && error "$MSG"
          warn "$MSG"
        else
          PATCH_FILEPERM=$(stat -c "%a" "$DST/$PATCH_FILENAME")
          mv "$DST/$PATCH_FILENAME.patched" "$DST/$PATCH_FILENAME"
          chmod "$PATCH_FILEPERM" "$DST/$PATCH_FILENAME"
        fi
      ;;
      pmnewdiff)
        NEW_COUNT=$(( NEW_COUNT + 1 ))
        [ "$ROLLBACK" ] && touch "$ROLLBACKDIR/$PATCH_FILENAME.pmdel"
        [ "$VERBOSE" ] && echo "Generating new file from diff $DST/$PATCH_FILENAME"
        rm -f "$DST/$PATCH_FILENAME"
        touch "$DST/$PATCH_FILENAME"
        xdelta3 -D -R -d -s "$DST/$PATCH_FILENAME" "$SRC/$FILE" "$DST/$PATCH_FILENAME.patched"
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
          MSG="Cannot apply xdelta patch to $DST/$PATCH_FILENAME"
          echo
          [ -z "$FORCE" ] && rollback-patch "$DST" && error "$MSG"
          warn "$MSG"
        else
          PATCH_FILEPERM=$(stat -c "%a" "$SRC/$FILE")
          mv "$DST/$PATCH_FILENAME.patched" "$DST/$PATCH_FILENAME"
          chmod "$PATCH_FILEPERM" "$DST/$PATCH_FILENAME"
        fi
      ;;
      pmdel)
        DEL_COUNT=$(( DEL_COUNT + 1 ))
        [ "$ROLLBACK" ] && cp -p "$DST/$PATCH_FILENAME" "$ROLLBACKDIR/$PATCH_FILENAME.pmbackup"
        [ "$VERBOSE" ] && echo "Removing file $DST/$PATCH_FILENAME"
        rm -f "$DST/$PATCH_FILENAME"
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
          MSG="Cannot delete file $DST/$PATCH_FILENAME"
          echo
          warn "$MSG"
        fi
      ;;
    esac
    printf "patched: $PATCH_COUNT, new: $NEW_COUNT, deleted: $DEL_COUNT\r"
  done < <(find . -type f \( -name \*.pmdiff -o -name \*.pmdel -o -name \*.pmnew -o -name \*.pmnewdiff \) -print0)
  echo
  popd >/dev/null

  echo
  echo "Finished!"
}

header

# check for options
while getopts "::fvnk" Option
do
  case $Option in
    f)
      FORCE="yes"
    ;;
    v)
      VERBOSE="yes"
    ;;
    n)
      ROLLBACK=""
    ;;
    k)
      KEEP_ROLLBACK="yes"
    ;;
    *)
      usage "Unimplemented option chosen."
    ;;
  esac
done
shift $((OPTIND-1))
CMD=$1


# check for xdelta3
XDELTA_INFO=$(xdelta3 config 2>&1 | grep SECONDARY_LZMA=1)
[ -z "$XDELTA_INFO" ] && error "Please install xdelta3 with LZMA support (e.g. 'sudo apt-get install xdelta3')"

# execute command
case "$CMD" in
  "create-patch")
    shift
    [ $# -lt 3 ] && usage "create-patch needs three arguments."
    create-patch "$1" "$2" "$3"
  ;;
  "rollback-patch")
    shift
    [ $# -lt 2 ] && usage "rollback-patch needs two arguments."
    KEEP_ROLLBACK="yes"
    ROLLBACKDIR=$(readlink -f "$1")
    rollback-patch "$2"
  ;;
  *)
    apply-patch "$1"
  ;;
esac
